/**
 * Copyright (c) 2016, yayunyin@126.com All Rights Reserved
 */
package org.yinyayun.ai.baidu;

import java.io.File;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.io.FileUtils;
import org.yinyayun.ai.utils.TxtFileReader;

/**
 * BaiduSentenceRun.java
 *
 * @author yinyayun
 */
public class BaiduSentenceRun {

    public static void main(String[] args) {
        BaiduNlpAnalysis baiduNlpAnalysis = new BaiduNlpAnalysis();
        String line = "理赔查询电话是多少";
        System.out.println(line.length());
        System.out.println(baiduNlpAnalysis.sentenceParser(line));
        // new BaiduSentenceRun().executor();
        // ClientFactory factory = ClientFactory.clientFactoryInstance();
        // System.out.println("x");
    }

    public void executor() {
        String dataFile = "C:/Users/yinyayun/Desktop/xyz咨询数据/句子/corpus-sentences.txt";
        String saveFile = "C:/Users/yinyayun/Desktop/xyz咨询数据/句子/corpus-sentences-json.txt";
        String completeFile = "C:/Users/yinyayun/Desktop/xyz咨询数据/句子/completes.txt";
        BlockingQueue<TextEntity> queue = new ArrayBlockingQueue<TextEntity>(1000);
        BlockingQueue<TextEntity> saveQueue = new ArrayBlockingQueue<TextEntity>(1000);
        TxtFileReader dataReader = null;
        try {
            // 加载已经完成
            Set<Integer> completes = loadCompletes(completeFile);
            // 打开资源
            dataReader = new TxtFileReader(dataFile);
            // 启动跑数据线程
            ExecutorService executorService = startBaiduAiThread(queue, saveQueue, 5);
            // 启动保存数据线程
            startSaveThread(saveQueue, new File(saveFile), new File(completeFile));
            int id = 0;
            while (dataReader.hasNext()) {
                TextEntity entity = new TextEntity(dataReader.readLine(), ++id);
                if (!completes.contains(entity.id)) {
                    queue.put(entity);
                }
                if (id % 1000 == 0) {
                    System.out.println("read complete " + id);
                }
            }
            System.out.println("读结束...");
            while (queue.size() > 0) {
                Thread.sleep(5000);
            }
            Thread.sleep(5000);
            executorService.shutdown();
            System.out.println("程序退出...");
            System.exit(0);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            close(dataReader);
        }
    }

    /**
     * 百度AI抓取线程
     * 
     * @param queue
     * @param saveQueue
     * @param baiduNlpAnalysis
     * @param threadSize
     * @return
     */
    public ExecutorService startBaiduAiThread(BlockingQueue<TextEntity> queue, BlockingQueue<TextEntity> saveQueue,
            int threadSize) {
        ExecutorService service = Executors.newFixedThreadPool(15);
        for (int i = 0; i < threadSize; i++) {
            final int threadid = i;
            service.submit(() -> {
                int threadCommitCount = 0;
                BaiduNlpAnalysis baiduNlpAnalysis = new BaiduNlpAnalysis();
                while (true) {
                    try {
                        TextEntity entity = queue.take();
                        if ((++threadCommitCount) % 50 == 0) {
                            System.out.println(String.format("thread %s commit %s", threadid, threadCommitCount));
                        }
                        if (entity.txt.length() * 2 <= 256) {
                            String json = baiduNlpAnalysis.sentenceParser(entity.txt, 1);
                            if (json == null || json.length() == 0) {
                                continue;
                            }
                            saveQueue.put(new TextEntity(json, entity.id));
                            Thread.sleep(50 + threadid);
                        }
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        }
        return service;
    }

    /**
     * 启动保存线程
     */
    public void startSaveThread(BlockingQueue<TextEntity> queue, File saveFile, File completeSaveFile) {
        Runnable run = () -> {
            while (true) {

                try {
                    TextEntity entity = queue.take();
                    String json = entity.txt;
                    int id = entity.id;
                    FileUtils.write(saveFile, json.concat("\n"), "utf-8", true);
                    FileUtils.write(completeSaveFile, String.valueOf(id).concat("\n"), "utf-8", true);
                    if (entity.id % 50 == 0) {
                        System.out.println("save commit " + entity.id);
                    }
                }
                catch (Exception e) {
                    e.printStackTrace();
                }

            }
        };
        new Thread(run).start();
    }

    /**
     * 加载完成的数据
     * 
     * @param complete
     * @return
     * @throws Exception
     */
    public Set<Integer> loadCompletes(String complete) throws Exception {
        Set<Integer> ids = new HashSet<Integer>();
        if (new File(complete).exists()) {
            try (TxtFileReader compeletIdRreader = new TxtFileReader(complete)) {
                while (compeletIdRreader.hasNext()) {
                    ids.add(Integer.valueOf(compeletIdRreader.readLine()));
                }
            }
        }
        return ids;
    }

    private static void close(AutoCloseable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    static class TextEntity {
        public String txt;
        public int id;

        public TextEntity(String txt, int id) {
            this.txt = txt;
            this.id = id;
        }
    }
}
